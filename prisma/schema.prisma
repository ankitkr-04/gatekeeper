// Set the Prisma client and database provider
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  emailVerified DateTime?
  password  String?  
  image     String?
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  Session[]
  accounts  Account[]

  // Relations with Museum
  managedMuseums Museum[] @relation("MuseumAdmins")
  staffAtMuseums Museum[] @relation("MuseumStaffs")
}

// Enum for user roles
enum Role {
  STAFF
  MUSEUM_ADMIN
  GLOBAL_ADMIN
}

// Booking model
model Booking {
  id             String      @id @default(uuid())
  bookedBy       String      @db.VarChar(255)
  email          String?
  phone          String?
  bookingDate    DateTime    @default(now())
  showDate       DateTime?
  bookingType    BookingType @default(INDIVIDUAL)
  price          Float
  museumId       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  museum         Museum?     @relation(fields: [museumId], references: [id])
  ticketItems    TicketItem[]

  // BookingStatus relation
  status         BookingStatus @default(BOOKED)
}

// Enum for booking types
enum BookingType {
  INDIVIDUAL
  GROUP
  EDUCATIONAL_TRIP
  OTHER
}

// Enum for booking status
enum BookingStatus {
  BOOKED
  CANCELLED
  USED
}


// TicketItem model
model TicketItem {
  id          String     @id @default(uuid())
  type        TicketType
  quantity    Int        @default(1)
  price       Float
  bookingId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  booking     Booking    @relation(fields: [bookingId], references: [id])
}

// Enum for ticket types
enum TicketType {
  ADULT
  CHILD
  SENIOR
}

// TicketStatus enum
enum TicketStatus {
  BOOKED
  CANCELLED
  USED
}

// Museum model
model Museum {
  id          String    @id @default(uuid())
  name        String
  location    String
  description String?
  adultPrice  Float
  childPrice  Float
  seniorPrice Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  staff       User[]    @relation("MuseumStaffs")
  admins      User[]    @relation("MuseumAdmins")
  holidays    Holiday[]

  Booking Booking[]
}

// Holiday model
model Holiday {
  id          String   @id @default(uuid())
  date        DateTime
  reason      String?
  museumId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  museum      Museum?  @relation(fields: [museumId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  // Relations
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// Session model for managing user sessions
model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime

  // Relations
  user               User     @relation(fields: [userId], references: [id])
}

// VerificationToken model for email verification and password recovery
model VerificationToken {
  identifier         String
  token              String   @unique
  expires            DateTime

  @@unique([identifier, token])
}
